##----------------------------------------------------------------------------##
## This file is distributed under the MIT License.                            ##
## See LICENSE.txt for details.                                               ##
## Copyright (C) Tran Tuan Nghia <trantuannghia95@gmail.com> 2022             ##
##----------------------------------------------------------------------------##

# Compile a shader to either hlsl binary or spirv
# Parameters:
#   source: input hlsl file
#   entry: entry point
#   profile: target profile
#   output: output file name (without extension)
# This template creates two targets: ${target_name}_hlsl and ${target_name}_spirv
# The compiled file will be located in: ${root_out_dir}/assets/${rel_path_from_root}
template("dxc_internal") {
  source = invoker.source
  entry = invoker.entry
  profile = invoker.profile
  output = invoker.output

  output_folder = get_path_info(rebase_path(source, "//"), "dir")
  output_path_without_ext = "${root_build_dir}/assets/${output_folder}/${output}"

  dxc_exe = ""

  if (is_win) {
    dxc_exe = "//third_party/dxc/bin/win64/dxc.exe"
  } else if (is_linux) {
    dxc_exe = "//third_party/dxc/bin/linux64/bin/dxc"
  } else {
    assert(false)
  }

  shared_args = [
    "--dxc-exe",
    rebase_path(dxc_exe, root_build_dir),
    "--shader",
    rebase_path(source, root_build_dir),
    "--entry",
    entry,
    "--profile",
    profile,
  ]

  action("${target_name}_hlsl") {
    script = "//third_party/dxc/dxc_wrapper.py"
    sources = [ source ]
    output_fullname = "${output_path_without_ext}.cso"
    outputs = [ output_fullname ]
    args = shared_args
    args += [
      "--output",
      rebase_path(output_fullname, root_build_dir),
    ]
  }

  action("${target_name}_spirv") {
    script = "//third_party/dxc/dxc_wrapper.py"
    sources = [ source ]
    output_fullname = "${output_path_without_ext}.spv"
    outputs = [ output_fullname ]
    args = shared_args
    args += [
      "--output",
      rebase_path(output_fullname, root_build_dir),
      "--spirv"
    ]
  }
}

# Hacky way to compile multiple shaders.
# |action_foreach| only support looping through sources which is not enough because we need to access the corresponding entries and profiles as well.
# The same for |foreach|, and GN doesn't allow looping using index so it is not possible to get the corresponding entries and profiles.
# So we have to group all of |dxc_internal| params into an array an create a target for that array.
# Parameters:
#   shaders: An array, in which each element is an array that has 4 params
#     [0]: source
#     [1]: entry
#     [2]: profile
#     [3]: output/{dxc_internal target name}
template("dxc") {
  tuples = invoker.shaders
  hlsl_targets = []
  spirv_targets = []
  foreach(tuple, tuples) {
    dxc_target_name = tuple[3]
    hlsl_targets += [ ":${dxc_target_name}_hlsl" ]
    spirv_targets += [ ":${dxc_target_name}_spirv" ]
    dxc_internal(dxc_target_name) {
      source = tuple[0]
      entry = tuple[1]
      profile = tuple[2]
      output = tuple[3]
    }
  }
  group("${target_name}_hlsl") {
    deps = hlsl_targets
  }
  group("${target_name}_spirv") {
    deps = spirv_targets
  }
}
