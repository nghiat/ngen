##----------------------------------------------------------------------------##
## This file is distributed under the MIT License.                            ##
## See LICENSE.txt for details.                                               ##
## Copyright (C) Tran Tuan Nghia <trantuannghia95@gmail.com> 2022             ##
##----------------------------------------------------------------------------##

import("//third_party/dxc/dxc.gni")

static_library("core") {
  sources = [
    "allocator.cpp",
    "allocator.h",
    "allocator_internal.cpp",
    "allocator_internal.h",
    "bit_stream.cpp",
    "bit_stream.h",
    "build.h",
    "command_line.cpp",
    "command_line.h",
    "compiler.h",
    "core_allocators.cpp",
    "core_allocators.h",
    "core_init.cpp",
    "core_init.h",
    "debug.h",
    "dynamic_array.h",
    "dynamic_array.inl",
    "dynamic_lib.h",
    "file.cpp",
    "file.h",
    "fixed_array.h",
    "fixed_array.inl",
    "free_list_allocator.cpp",
    "free_list_allocator.h",
    "gpu/gpu.cpp",
    "gpu/gpu.h",
    "gpu/vulkan/vulkan.cpp",
    "gpu/vulkan/vulkan.h",
    "gpu/vulkan/vulkan_loader.cpp",
    "gpu/vulkan/vulkan_loader.h",
    "hash.cpp",
    "hash.h",
    "hash_table.h",
    "hash_table.inl",
    "intrusive_list.h",
    "intrusive_list.inl",
    "linear_allocator.h",
    "linear_allocator.inl",
    "loader/dae.cpp",
    "loader/dae.h",
    "loader/dds.cpp",
    "loader/dds.h",
    "loader/obj.cpp",
    "loader/obj.h",
    "loader/png.cpp",
    "loader/png.h",
    "loader/tga.cpp",
    "loader/tga.h",
    "loader/xml.cpp",
    "loader/xml.h",
    "log.cpp",
    "log.h",
    "math/float.h",
    "math/float.inl",
    "math/mat4.h",
    "math/mat4.inl",
    "math/plane.h",
    "math/quat.h",
    "math/quat.inl",
    "math/ray.h",
    "math/ray.inl",
    "math/sphere.h",
    "math/transform.h",
    "math/transform.inl",
    "math/triangle.h",
    "math/vec2.h",
    "math/vec2.inl",
    "math/vec3.h",
    "math/vec3.inl",
    "math/vec4.h",
    "math/vec4.inl",
    "mono_time.h",
    "os.h",
    "path.cpp",
    "path.h",
    "path_utils.cpp",
    "path_utils.h",
    "reflection/reflection.cpp",
    "reflection/reflection.h",
    "string.h",
    "string.inl",
    "string_utils.cpp",
    "string_utils.h",
    "string_utils_char.cpp",
    "types.h",
    "utils.h",
    "value.cpp",
    "value.h",
    "window/window.h",
    "windows_lite.h",
  ]

  all_dependent_configs = []

  if (is_win) {
    sources += [
      "debug_win.cpp",
      "dynamic_lib_win.cpp",
      "file_win.cpp",
      "gpu/d3d12/d3d12.cpp",
      "gpu/d3d12/d3d12.h",
      "mono_time_win.cpp",
      "string_utils_wchar.cpp",
      "path_utils_win.cpp",
      "path_win.cpp",
      "thread_win.cpp",
      "window/window_win.cpp",
    ]

    libs = [
      "Dbghelp.lib",
      "User32.lib",

      "D3D12.lib",
      "D3DCompiler.lib",
      "DXGI.lib",
    ]

    all_dependent_configs += [
      ":core_natvis",
      ":math_natvis"
    ]
  } else if (is_linux) {
    sources += [
      "debug_linux.cpp",
      "dynamic_lib_linux.cpp",
      "file_linux.cpp",
      "mono_time_linux.cpp",
      "path_utils_linux.cpp",
      "path_linux.cpp",
      "thread_unix.cpp",
      "window/window_x11.cpp",
    ]
    libs = [
      "X11",
      "xcb",
      "X11-xcb",
      "xcb-keysyms",
    ]
  }

  all_dependent_configs += [
    ":gpu_vulkan_binding_offsets",
    "//third_party/vulkan:vulkan_config",
  ]
}

config("core_natvis") {
  ldflags = [ "/NATVIS:" + rebase_path("core.natvis", root_build_dir)]
}

config("math_natvis") {
  ldflags = [ "/NATVIS:" + rebase_path("math/math.natvis", root_build_dir)]
}

executable("reflection_parser") {
  sources = [
    "reflection/reflection_parser.cpp",
  ]

  deps = [
    ":core",
    ":reflection_template",
    "//third_party/libclang",
  ]
}

copy("reflection_template") {
  sources = [
    "reflection/template.reflection.cpp",
  ]
  outputs = [
    "$root_out_dir/template/{{source_file_part}}"
  ]
}

config("gpu_vulkan_binding_offsets") {
  defines = [
    "GPU_VK_UNIFORM_BINDING_OFFSET=${uniform_binding_offset}",
    "GPU_VK_TEXTURE_BINDING_OFFSET=${texture_binding_offset}",
    "GPU_VK_SAMPLER_BINDING_OFFSET=${sampler_binding_offset}",
  ]
}
