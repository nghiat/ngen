*** grep is the priority for this convention

* Headers use #pragma once
  Reason: short, ubiquitous
* Don't use namespace
  Reason: namespace makes it harder to grep
* Two spaces for indentation
  Reason: consistent on all editors
* Opening brace is on the same line, closing brace is on the next line (even with one-liner function so it helps with putting breakpoint in debugger)
* Conditional
  - Always use braces even one-liner if -> consistent, and you won't forget when adding more statements.
  - else is on the same line as the closing brace of if
* Function declaration:
  - out -> in + out -> in
    Reason: you can put default arguments at the end

* Naming conventions
- Filename: lower_case.*
- Public macro: M_macro_name
- Internal macro: M_macro_name_
- Public enum name: E_enum_name
- Internal enum name: E_enum_name_
- Enum member: e_enum_name_value
- Public functions: lower_case()
- Internal functions: lower_case_()
- Local variable: lower_case
- Global variable: g_lower_case
- Constant variable: c_lower_case
- Class/Struct:
  - Public struct/class name: Class_name (Only the first letter is capitalized, even when the first word is an abbreviation, e.g. Udp instead of UDP)
  - Internal struct/class name: Class_name_
  - Public member function: class name abbreviation + _lower_case
  - Protected/Private member function: lower_case_
  - Struct member: lower_case
  - Class member:
    - Public: m_lower_case
    - Protected/Private: m_lower_case_
      Reason: To differentiate class member with local variables in a member function.
  - Static member: s_lower_case
- Prefix precedence: g -> s -> c (m is discarded if there is any other prefix)
- Template parameter: T (or T_type_name)
- To summarize:
  - M_: macro
  - E_, e_: enum name / enum value
  - T_: template parameter
  - g_, c_, s_, m_: global/const/static/meber variable

* Including conventions
- Project headers are surrounded with "", other headers are surrounded with <>
- Project and third-party header paths should be relative to the root folder
- Order: Related header (Same file name)-> Project headers -> Third party headers -> C headers -> C++ headers -> Platform headers -> Conditional headers
- Seperate each group by an empty line
- Each group is sorted in alphabetical order

* Class
- Declaration order:
  - public -> protected -> private
    - Types -> Functions -> Members
      - static -> non-static
- Members should always be public unless setting or getting them require additional logic, then you can change them to private and refactor their usages
- Functions should be set to private whenever possible.

* Constructor and Destrustor
- Both should do no real work
- Real work should be done in *init()/*destroy()
